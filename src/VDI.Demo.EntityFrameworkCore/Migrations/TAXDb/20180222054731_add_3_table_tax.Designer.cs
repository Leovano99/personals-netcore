// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VDI.Demo.EntityFrameworkCore;

namespace VDI.Demo.Migrations.TAXDb
{
    [DbContext(typeof(TAXDbContext))]
    [Migration("20180222054731_add_3_table_tax")]
    partial class add_3_table_tax
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VDI.Demo.TAXDB.FP_TR_FPDetail", b =>
                {
                    b.Property<string>("entityCode")
                        .HasMaxLength(1);

                    b.Property<string>("coCode")
                        .HasMaxLength(5);

                    b.Property<string>("FPCode")
                        .HasMaxLength(20);

                    b.Property<short>("transNo");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("currencyCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<decimal>("currencyRate")
                        .HasColumnType("money");

                    b.Property<decimal>("transAmount")
                        .HasColumnType("money");

                    b.Property<string>("transDesc")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("entityCode", "coCode", "FPCode", "transNo");

                    b.HasAlternateKey("coCode", "entityCode", "FPCode", "transNo");

                    b.ToTable("FP_TR_FPDetail");
                });

            modelBuilder.Entity("VDI.Demo.TAXDB.FP_TR_FPHeader", b =>
                {
                    b.Property<string>("entityCode")
                        .HasMaxLength(1);

                    b.Property<string>("coCode")
                        .HasMaxLength(5);

                    b.Property<string>("FPCode")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<decimal>("DPAmount")
                        .HasColumnType("money");

                    b.Property<string>("FPBranchCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("FPNo")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("FPStatCode")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("FPTransCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("FPType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("FPYear")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NPWP")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("accCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<decimal>("discAmount")
                        .HasColumnType("money");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("payNo");

                    b.Property<string>("paymentCode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("pmtBatchNo")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("priceType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("psCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("rentalCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("sourceCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime>("transDate");

                    b.Property<string>("transNo")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("unitCode")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("unitNo")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<decimal?>("unitPriceAmt")
                        .HasColumnType("money");

                    b.Property<decimal?>("unitPriceVat")
                        .HasColumnType("money");

                    b.Property<string>("userAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("vatAmt")
                        .HasColumnType("money");

                    b.HasKey("entityCode", "coCode", "FPCode");

                    b.HasAlternateKey("coCode", "entityCode", "FPCode");

                    b.ToTable("FP_TR_FPHeader");
                });

            modelBuilder.Entity("VDI.Demo.TAXDB.msBatchPajakStock", b =>
                {
                    b.Property<int>("BatchID");

                    b.Property<string>("CoCode")
                        .HasMaxLength(5);

                    b.Property<string>("FPBranchCode")
                        .HasMaxLength(3);

                    b.Property<string>("FPYear")
                        .HasMaxLength(2);

                    b.Property<string>("FPNo")
                        .HasMaxLength(8);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("FPStatCode")
                        .HasMaxLength(3);

                    b.Property<string>("FPTransCode")
                        .HasMaxLength(3);

                    b.Property<bool?>("IsAvailable");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("YearPeriod")
                        .HasMaxLength(50);

                    b.HasKey("BatchID", "CoCode", "FPBranchCode", "FPYear", "FPNo");

                    b.HasAlternateKey("BatchID", "CoCode", "FPBranchCode", "FPNo", "FPYear");

                    b.ToTable("msBatchPajakStock");
                });

            modelBuilder.Entity("VDI.Demo.TAXDB.FP_TR_FPDetail", b =>
                {
                    b.HasOne("VDI.Demo.TAXDB.FP_TR_FPHeader", "FP_TR_FPHeader")
                        .WithMany("FP_TR_FPDetail")
                        .HasForeignKey("entityCode", "coCode", "FPCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
